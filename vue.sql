-- Implementation de la vue correspondant au phyla des bacteries
CREATE OR REPLACE VIEW BACTERIE AS
	SELECT HABITAT.biome, ORGANISME.genre, ORGANISME.espece, GENOME.genes, PROTEINE.*, DOMAINE.debut as deb_dom, DOMAINE.fin as fin_dom, DOMAINE.nom as nom_domaine, STRUCTURE_SECONDAIRE.debut as deb_str, STRUCTURE_SECONDAIRE.fin as fin_str, STRUCTURE_SECONDAIRE.nom as nom_structure
	FROM HABITAT FULL OUTER JOIN ORGANISME ON ORGANISME.id_habitat = HABITAT.id
	FULL OUTER JOIN GENOME ON GENOME.genre = ORGANISME.genre AND GENOME.espece = ORGANISME.espece
	JOIN PROTEINE ON PROTEINE.id_genome = GENOME.id
	JOIN EXPERIENCE ON EXPERIENCE.id_proteine = PROTEINE.id
	JOIN DOMAINE ON DOMAINE.id_proteine = PROTEINE.id
	JOIN STRUCTURE_SECONDAIRE ON STRUCTURE_SECONDAIRE.id_proteine = PROTEINE.id
	JOIN HOMOLOGUE ON HOMOLOGUE.id_proteine1 = PROTEINE.id
	WHERE ORGANISME.phyla = 'Bacteria';

-- Implementation de la vue correspondant à 'Homo sapiens'
CREATE OR REPLACE VIEW HOMME AS
	SELECT HABITAT.biome, ORGANISME.genre, ORGANISME.espece, GENOME.genes, PROTEINE.*, DOMAINE.debut as deb_dom, DOMAINE.fin as fin_dom, DOMAINE.nom as nom_domaine, STRUCTURE_SECONDAIRE.debut as deb_str, STRUCTURE_SECONDAIRE.fin as fin_str, STRUCTURE_SECONDAIRE.nom as nom_structure
	FROM HABITAT FULL OUTER JOIN ORGANISME ON ORGANISME.id_habitat = HABITAT.id
	FULL OUTER JOIN GENOME ON GENOME.genre = ORGANISME.genre AND GENOME.espece = ORGANISME.espece
	JOIN PROTEINE ON PROTEINE.id_genome = GENOME.id
	JOIN EXPERIENCE ON EXPERIENCE.id_proteine = PROTEINE.id
	JOIN DOMAINE ON DOMAINE.id_proteine = PROTEINE.id
	JOIN STRUCTURE_SECONDAIRE ON STRUCTURE_SECONDAIRE.id_proteine = PROTEINE.id
	JOIN HOMOLOGUE ON HOMOLOGUE.id_proteine1 = PROTEINE.id
	WHERE ORGANISME.genre = 'Homo' AND ORGANISME.espece = 'sapiens';

-- Implementation de la vue correspondant à tout sauf les tuples provenant des USA
CREATE OR REPLACE VIEW NON_USA AS
	SELECT HABITAT.biome, ORGANISME.genre, ORGANISME.espece, GENOME.genes, PROTEINE.*, DOMAINE.debut as deb_dom, DOMAINE.fin as fin_dom, DOMAINE.nom as nom_domaine, STRUCTURE_SECONDAIRE.debut as deb_str, STRUCTURE_SECONDAIRE.fin as fin_str, STRUCTURE_SECONDAIRE.nom as nom_structure
	FROM HABITAT FULL OUTER JOIN ORGANISME ON ORGANISME.id_habitat = HABITAT.id
	FULL OUTER JOIN GENOME ON GENOME.genre = ORGANISME.genre AND GENOME.espece = ORGANISME.espece
	JOIN PROTEINE ON PROTEINE.id_genome = GENOME.id
	JOIN EXPERIENCE ON EXPERIENCE.id_proteine = PROTEINE.id
	JOIN DOMAINE ON DOMAINE.id_proteine = PROTEINE.id
	JOIN STRUCTURE_SECONDAIRE ON STRUCTURE_SECONDAIRE.id_proteine = PROTEINE.id
	JOIN HOMOLOGUE ON HOMOLOGUE.id_proteine1 = PROTEINE.id
	WHERE EXPERIENCE.pays != 'USA';

-- Implementation de la vue correspondant au proteine dont la taille est inférieur ou égale au 10 percentile
CREATE OR REPLACE VIEW plus_petite AS
	SELECT *
	FROM PROTEINE
	WHERE PROTEINE.taille <= dixieme_percentile_taille;

-- Implementation de la vue correspondant au proteine dont la taille est supérieur au 90 percentile
CREATE OR REPLACE VIEW plus_grande AS
	SELECT *
	FROM PROTEINE
	WHERE PROTEINE.taille > quatre_vingt_dix_taille;

-- Implementation de la vue correspondant à quelques statistiques sur les protéines
CREATE OR REPLACE VIEW STATISTIQUES_PROTEINE AS
	SELECT PROTEINE.id, COUNT(CASE WHEN STRUCTURE_SECONDAIRE.nom = 'helix' THEN 1 END) AS nombre_helice,
	COUNT(CASE WHEN STRUCTURE_SECONDAIRE.nom = 'strand' THEN 1 END) AS nombre_brin,
	COUNT(CASE WHEN STRUCTURE_SECONDAIRE.nom = 'turn' THEN 1 END) AS nombre_boucle,
	SUM(CASE WHEN STRUCTURE_SECONDAIRE.nom = 'helix' THEN STRUCTURE_SECONDAIRE.fin - STRUCTURE_SECONDAIRE.debut + 1 END) AS taille_helice,
	SUM(CASE WHEN STRUCTURE_SECONDAIRE.nom = 'strand' THEN STRUCTURE_SECONDAIRE.fin - STRUCTURE_SECONDAIRE.debut + 1 END) AS taille_brin,
	SUM(CASE WHEN STRUCTURE_SECONDAIRE.nom = 'turn' THEN STRUCTURE_SECONDAIRE.fin - STRUCTURE_SECONDAIRE.debut + 1 END) AS taille_boucle,
	ROUND(AVG(CASE WHEN STRUCTURE_SECONDAIRE.nom = 'helix' THEN STRUCTURE_SECONDAIRE.fin - STRUCTURE_SECONDAIRE.debut + 1 END), 3) AS moyenne_helice,
	ROUND(AVG(CASE WHEN STRUCTURE_SECONDAIRE.nom = 'strand' THEN STRUCTURE_SECONDAIRE.fin - STRUCTURE_SECONDAIRE.debut + 1 END), 3) AS moyenne_brin,
	ROUND(AVG(CASE WHEN STRUCTURE_SECONDAIRE.nom = 'turn' THEN STRUCTURE_SECONDAIRE.fin - STRUCTURE_SECONDAIRE.debut + 1 END), 3) AS moyenne_boucle
	FROM PROTEINE LEFT JOIN STRUCTURE_SECONDAIRE ON PROTEINE.id = STRUCTURE_SECONDAIRE.id_proteine
	GROUP BY PROTEINE.id;

-- Implementation de la vue correspondant à quelques statistiques sur les domaines
CREATE OR REPLACE VIEW STATISTIQUES_DOMAINE AS
	SELECT DOMAINE.id, COUNT(CASE WHEN STRUCTURE_SECONDAIRE.nom = 'helix' THEN 1 END) AS nombre_helice,
	COUNT(CASE WHEN STRUCTURE_SECONDAIRE.nom = 'strand' THEN 1 END) AS nombre_brin,
	COUNT(CASE WHEN STRUCTURE_SECONDAIRE.nom = 'turn' THEN 1 END) AS nombre_boucle,
	SUM(CASE WHEN STRUCTURE_SECONDAIRE.nom = 'helix' THEN STRUCTURE_SECONDAIRE.fin - STRUCTURE_SECONDAIRE.debut + 1 END) AS taille_helice,
	SUM(CASE WHEN STRUCTURE_SECONDAIRE.nom = 'strand' THEN STRUCTURE_SECONDAIRE.fin - STRUCTURE_SECONDAIRE.debut + 1 END) AS taille_brin,
	SUM(CASE WHEN STRUCTURE_SECONDAIRE.nom = 'turn' THEN STRUCTURE_SECONDAIRE.fin - STRUCTURE_SECONDAIRE.debut + 1 END) AS taille_boucle,
	ROUND(AVG(CASE WHEN STRUCTURE_SECONDAIRE.nom = 'helix' THEN STRUCTURE_SECONDAIRE.fin - STRUCTURE_SECONDAIRE.debut + 1 END), 3) AS moyenne_helice,
	ROUND(AVG(CASE WHEN STRUCTURE_SECONDAIRE.nom = 'strand' THEN STRUCTURE_SECONDAIRE.fin - STRUCTURE_SECONDAIRE.debut + 1 END), 3) AS moyenne_brin,
	ROUND(AVG(CASE WHEN STRUCTURE_SECONDAIRE.nom = 'turn' THEN STRUCTURE_SECONDAIRE.fin - STRUCTURE_SECONDAIRE.debut + 1 END), 3) AS moyenne_boucle
	FROM DOMAINE RIGHT JOIN PROTEINE ON DOMAINE.id_proteine = PROTEINE.id LEFT JOIN STRUCTURE_SECONDAIRE ON PROTEINE.id = STRUCTURE_SECONDAIRE.id_proteine
	GROUP BY DOMAINE.id;

-- Implementation de la vue correspondant à toutes les proteines ayant plus d'une succession de 4x('helice', 'brin') (DEADLOCK)
CREATE OR REPLACE VIEW TIM_BARREL AS
	SELECT PROTEINE.id, PROTEINE.nom, STRUCTURE_SECONDAIRE.nom AS Structure, STRUCTURE_SECONDAIRE.debut, STRUCTURE_SECONDAIRE.fin
	FROM PROTEINE LEFT JOIN STRUCTURE_SECONDAIRE ON PROTEINE.id = STRUCTURE_SECONDAIRE.id_proteine
	WHERE PROTEINE.id IN (SELECT * FROM TABLE(tim_barrel(4)));
